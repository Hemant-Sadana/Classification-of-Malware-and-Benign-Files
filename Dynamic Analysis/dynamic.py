#This program takes input the pathname of directory containing files to be tested and output the dynamic.csv file
#take as input the name of directory containing .json files
print("Enter Path : ")
pathname = input()                          
import pickle
import os
import json
import numpy as np
import csv
import warnings
warnings.filterwarnings("ignore")

filename = 'model.sav'                          
clf = pickle.load(open(filename, 'rb'))     #Load trained model

j=0

if(pathname[-1]!='/'):                      #Make sure that pathname has '/' at the end
    pathname += '/'

files = os.listdir(pathname)            
X_test = np.zeros((len(files),39))      #Initialise the test features array

network = ['tls','udp','http','icmp','smtp','tcp','hosts','dns','domains']          #Network related features to be selected (determined using class notes knowledge and training and validation)
summary = ['file_created', 'dll_loaded', 'file_opened', 'regkey_opened', 'file_written', 'file_failed', 'file_read', 'regkey_read', 'file_exists', 'guid', 'directory_created', 'mutex', 'directory_enumerated', 'regkey_written', 'command_line', 'file_deleted', 'directory_removed', 'file_recreated', 'connects_host', 'resolves_host', 'regkey_deleted', 'connects_ip', 'file_copied', 'fetches_url', 'file_moved', 'wmi_query','tls_master'] #Features under summary section to be selected (determined using class notes knowledge and training and validation)

filenames = []      #To append file names that will come handy to ouput the csv file 

#Feature extraction, selection begins
for x in files:                         
    filenames.append(x)
    with open('{}{}'.format(pathname, x)) as infile:
        fdata = json.load(infile)
    
    k = 0                                   #Extracting duration from info section
    if('info' in fdata.keys()):
        if('duration' in fdata['info'].keys()):
            X_test[j][k] = fdata['info']['duration']
    
    k = 1                                   #selecting required network features
    if('network' in fdata.keys()):
        for i in range(len(network)):
            if(network[i] in  fdata['network'].keys()):
                X_test[j][k] =len(fdata['network'][network[i]])
            k=k+1
    
    k = 10                                  #selecting required features from behavior section
    if('behavior' in fdata.keys()):
        if('processes' in fdata['behavior'].keys()):
            X_test[j][k] = len(fdata['behavior']['processes'])
        k = k + 1
            
        if('summary' in fdata['behavior'].keys()):
            for i in range(len(summary)):
                if(summary[i] in fdata['behavior']['summary'].keys()):
                    X_test[j][k] = len(fdata['behavior']['summary'][summary[i]])
                k=k+1
    
    k = 38                              #selecting number of strings as a feature
    if('strings' in fdata.keys()):
        X_test[j][k] = len(fdata['strings'])
    j = j+1
    infile.close()

y_pred = clf.predict(X_test)        #Predict the labels of files 0 -> Benign, 1-> Malware

out_pred = []

#M for malware and B for benign reqiuired to output the csv file
for i in range(y_pred.size):
    if(y_pred[i]==0):
        out_pred.append('B')
    else:
        out_pred.append('M')

with open('dynamic.csv', 'w', newline='') as file:       #To output .csv file
    writer = csv.writer(file)
    writer.writerow(["File_Hash","Predicted Label"])
    for i in range(y_pred.size):
        writer.writerow([filenames[i][0:-5],out_pred[i]])           
