import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression as lr
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier

best_acc = 0
X = np.load('features.npy')         #loads the features  created by extract_features.py
Y = np.zeros(10238)
for i in range(5125,10238):             #Set the label 0 for benign and 1 for malware
    Y[i]=1

#Selecting only relevant features as other features have almost same values in both benign and malware files
X_new = X[:,3:11]
X_new = np.append(X_new,X[:,12:13],axis = 1)
X_new = np.append(X_new,X[:,15:25],axis = 1)
X_new = np.append(X_new,X[:,0:1],axis =1)
X = X_new
#Splitting data so as to perform validation    
X_train, X_test, y_train, y_test = train_test_split(X ,Y, test_size = .25, random_state = 100)

#Training using logistic regression
clf1 = lr( penalty= "l2", C = 1.0, fit_intercept = True, solver = "liblinear" )
clf1.fit( X_train, y_train )

ypred = clf1.predict(X_test)
count=0
for i in range(y_test.size):
    if(ypred[i]==y_test[i]):
        count = count+1

acc = count*100/ypred.size
print(acc)

if(acc>best_acc):
    best_acc = acc
    model = 'Logistic Regression'

#Training using Decision Trees
clf3 = DecisionTreeClassifier()
clf3.fit(X_train, y_train)
ypred = clf3.predict(X_test)
count=0
for i in range(y_test.size):
    if(ypred[i]==y_test[i]):
        count = count+1

acc = count*100/ypred.size
print(acc)

if(acc>best_acc):
    best_acc = acc
    model = 'Decision Tree'

#Training using random forest classifier
clf4 = RandomForestClassifier(n_estimators = 100)
clf4.fit(X_train,y_train)
ypred = clf4.predict(X_test)
count=0
for i in range(y_test.size):
    if(ypred[i]==y_test[i]):
        count = count+1

acc = count*100/ypred.size
print(acc)

if(acc>best_acc):
    best_acc = acc
    model = 'Random Forest'

#The model that gave best accuracy on validation (In this case Decision trees gave best accuracy)
print("Best Model : ",model)