import os
import numpy as np
from ast import literal_eval #To convert hexadecimal(0x..) to decimal

#Path containing benign files
pathname1 = 'C:/Static/Static_Analysis_RAWDATA/Static_Analysis_RAWDATA/Benign/'
folders1 = os.listdir(pathname1)

#Path containing malware files
pathname2 = 'C:/Static/Static_Analysis_RAWDATA/Static_Analysis_RAWDATA/Malware/Malw/'
folders2 = os.listdir(pathname2)

files = os.listdir('{}{}'.format(pathname1, folders1[0]))

k=0
tot_size = len(folders1) + len(folders2)

#Initialise feature array
featarray = np.zeros((tot_size,25))

#Features to be extracted from Struct_Info.txt
file_header = ['NumberOfSections:','NumberOfSymbols:','SizeOfOptionalHeader:']
image_header = ['MajorLinkerVersion:','MinorLinkerVersion:','SizeOfCode:','SizeOfInitializedData:','SizeOfUninitializedData:','SizeOfImage:','SizeOfHeaders:','SizeOfStackReserve:','SizeOfStackCommit:','SizeOfHeapReserve:','SizeOfHeapCommit:','NumberOfRvaAndSizes:']
sections = ['.text','.rdata','.data','.rsrc','.idata','.reloc']
exported_symbols = ['NumberOfFunctions:','NumberOfNames:']

#Feature Extraction from Struct_Info.txt begins
count = 0
for o in range(2):
    if(o==0):
        pname = pathname1
        fold = folders1
    else:
        pname = pathname2
        fold = folders2
        
    for i in fold:
        f = open(('{}{}{}{}'.format(pname, i,'/',files[2])),"r",errors = "ignore")
        lines = (f.readlines())
        b=[]
        a=[]
        count = 0
        flag1 = 1
        flag2 = 1
        flag3 = 1
        flag4 = 1
        
        for j in range(len(lines)):
            b = lines[j].split()
            a += b
            
        for j in range(len(a)):
            if(flag1 and a[j] in file_header):
                featarray[k][file_header.index(a[j])] = literal_eval(a[j+1])        #Convert hex value to integer
                
            if(flag2 and a[j] in image_header):
                featarray[k][image_header.index(a[j])+3] = literal_eval(a[j+1])    #Convert hex value to integer
                flag1 = 0
                
            if(a[j] in sections):
                featarray[k][sections.index(a[j])+15] = 1                          #if the section is present than 1 else 0 as malware usually try to hide the sections by changing their names
                
            if(flag3 and a[j] in exported_symbols):
                featarray[k][exported_symbols.index(a[j])+21] = literal_eval(a[j+1])    #Convert hex value tp integer
                flag2 = 0
                
            if(a[j] == '----------Imported'):
                flag4 = 1
                flag3 = 0
                
            if(a[j] == '----------Resource'):
                flag4 = 0
                
            if(flag4 == 1):                 #Checks for dll only if flag4 is set to save computation, as imported dlls occurs in imports sections of Structutre.txt 
                x = str(a[j])
                z = x.find('.dll')
                if(z!=-1):
                    count = count+1
                    
        featarray[k][23] = count        #Stores the number of dll imported by the file
        k = k+1    
        f.close()

k = 0
#Feature Extraction from String.txt begins (basically extracting number of strings in each file)
for o in range(2):
    if(o==0):
        pname = pathname1
        fold = folders1
    else:
        pname = pathname2
        fold = folders2
        
    for i in fold:
        f = open(('{}{}{}{}'.format(pname, i,'/',files[1])),"r",errors = "ignore")
        lines = (f.readlines())
        n = len(lines)
        featarray[k][24] = n
        k = k+1
        f.close()

np.save("features",featarray)       #Saves the feature array that willl be used during validation.